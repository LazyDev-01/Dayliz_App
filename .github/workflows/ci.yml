name: 🚀 Dayliz App CI/CD Pipeline

on:
  push:
    branches: [ main, production-readiness, staging ]
  pull_request:
    branches: [ main, production-readiness ]
  workflow_dispatch:

env:
  FLUTTER_VERSION: '3.24.5'
  JAVA_VERSION: '17'

jobs:
  # 🔍 Security and Code Quality Checks
  security-scan:
    name: 🔒 Security & Quality Analysis
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis

      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📊 Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: 🕵️ Secret Detection with GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 📋 Dependency Review
        uses: actions/dependency-review-action@v4
        if: github.event_name == 'pull_request'

  # 🧪 Flutter Build and Test
  build-and-test:
    name: 🏗️ Build & Test Flutter App
    runs-on: ubuntu-latest
    needs: security-scan
    strategy:
      matrix:
        environment: [development, staging]
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: ☕ Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}

      - name: 🐦 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: 📦 Get Flutter Dependencies
        working-directory: apps/mobile
        run: flutter pub get

      - name: 🔍 Analyze Flutter Code
        working-directory: apps/mobile
        run: flutter analyze --fatal-infos

      - name: 🧪 Run Flutter Tests
        working-directory: apps/mobile
        run: flutter test --coverage

      - name: 📊 Upload Coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: apps/mobile/coverage/lcov.info
          flags: flutter
          name: flutter-coverage

      - name: 🔧 Validate Environment Variables
        working-directory: apps/mobile
        run: |
          echo "Validating required environment variables..."
          if [ -z "$GOOGLE_MAPS_API_KEY" ]; then
            echo "❌ GOOGLE_MAPS_API_KEY is required"
            exit 1
          fi
          echo "✅ Environment validation passed"
        env:
          GOOGLE_MAPS_API_KEY: ${{ secrets.GOOGLE_MAPS_API_KEY }}

      - name: 🏗️ Build APK (Debug)
        working-directory: apps/mobile
        run: flutter build apk --debug --target-platform android-arm64
        env:
          GOOGLE_MAPS_API_KEY: ${{ secrets.GOOGLE_MAPS_API_KEY }}

      - name: 📱 Build APK (Release) - Production Only
        if: matrix.environment == 'staging' && github.ref == 'refs/heads/main'
        working-directory: apps/mobile
        run: flutter build apk --release --target-platform android-arm64
        env:
          GOOGLE_MAPS_API_KEY: ${{ secrets.GOOGLE_MAPS_API_KEY_PROD }}

      - name: 📦 Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: apk-${{ matrix.environment }}-${{ github.sha }}
          path: apps/mobile/build/app/outputs/flutter-apk/*.apk
          retention-days: 30

  # 🔒 Security Testing
  security-testing:
    name: 🛡️ Security Testing
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production-readiness'
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔍 SAST with Semgrep
        uses: semgrep/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

      - name: 📊 Upload SAST results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: semgrep.sarif

  # 🚀 Deployment (Staging) - DISABLED FOR NOW
  deploy-staging:
    name: 🚀 Deploy to Staging (Artifacts Only)
    runs-on: ubuntu-latest
    needs: [build-and-test, security-testing]
    if: github.ref == 'refs/heads/production-readiness' && github.event_name == 'push'

    steps:
      - name: 📥 Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: apk-staging-${{ github.sha }}

      - name: 📋 Deployment Summary
        run: |
          echo "🚀 Staging Deployment Summary"
          echo "================================"
          echo "✅ Build artifacts ready for distribution"
          echo "📱 APK files available in GitHub Actions artifacts"
          echo "🔄 Firebase App Distribution: Not configured yet"
          echo ""
          echo "To enable Firebase deployment:"
          echo "1. Set up Firebase project"
          echo "2. Add FIREBASE_APP_ID_STAGING secret"
          echo "3. Add FIREBASE_SERVICE_ACCOUNT secret"
          echo "4. Uncomment Firebase deployment step"

          ls -la *.apk || echo "No APK files found"

      - name: 🚀 Deploy to Firebase App Distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{ secrets.FIREBASE_APP_ID_STAGING }}
          serviceCredentialsFileContent: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
          groups: testers
          file: app-debug.apk
          releaseNotes: |
            🚀 Staging Build - ${{ github.sha }}

            Changes in this build:
            ${{ github.event.head_commit.message }}

            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}

  # 📊 Build Status Notification
  notify:
    name: 📢 Build Notification
    runs-on: ubuntu-latest
    needs: [security-scan, build-and-test, security-testing]
    if: always()
    
    steps:
      - name: 📊 Build Status Summary
        run: |
          echo "🔍 Security Scan: ${{ needs.security-scan.result }}"
          echo "🏗️ Build & Test: ${{ needs.build-and-test.result }}"
          echo "🛡️ Security Testing: ${{ needs.security-testing.result }}"
          
          if [[ "${{ needs.security-scan.result }}" == "failure" || "${{ needs.build-and-test.result }}" == "failure" ]]; then
            echo "❌ Pipeline failed - Check logs for details"
            exit 1
          else
            echo "✅ Pipeline completed successfully"
          fi
