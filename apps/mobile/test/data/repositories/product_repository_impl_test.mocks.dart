// Mocks generated by Mockito 5.4.5 from annotations
// in dayliz_app/test/data/repositories/product_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dayliz_app/core/network/network_info.dart' as _i6;
import 'package:dayliz_app/data/datasources/product_local_data_source.dart'
    as _i5;
import 'package:dayliz_app/data/datasources/product_remote_data_source.dart'
    as _i3;
import 'package:dayliz_app/data/models/product_model.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeProductModel_0 extends _i1.SmartFake implements _i2.ProductModel {
  _FakeProductModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ProductRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductRemoteDataSource extends _i1.Mock
    implements _i3.ProductRemoteDataSource {
  MockProductRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.ProductModel>> getProducts({
    int? page,
    int? limit,
    String? categoryId,
    String? subcategoryId,
    String? searchQuery,
    String? sortBy,
    bool? ascending,
    double? minPrice,
    double? maxPrice,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getProducts,
          [],
          {
            #page: page,
            #limit: limit,
            #categoryId: categoryId,
            #subcategoryId: subcategoryId,
            #searchQuery: searchQuery,
            #sortBy: sortBy,
            #ascending: ascending,
            #minPrice: minPrice,
            #maxPrice: maxPrice,
          },
        ),
        returnValue:
            _i4.Future<List<_i2.ProductModel>>.value(<_i2.ProductModel>[]),
      ) as _i4.Future<List<_i2.ProductModel>>);

  @override
  _i4.Future<_i2.ProductModel> getProductById(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getProductById,
          [id],
        ),
        returnValue: _i4.Future<_i2.ProductModel>.value(_FakeProductModel_0(
          this,
          Invocation.method(
            #getProductById,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.ProductModel>);

  @override
  _i4.Future<List<_i2.ProductModel>> getFeaturedProducts({int? limit}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFeaturedProducts,
          [],
          {#limit: limit},
        ),
        returnValue:
            _i4.Future<List<_i2.ProductModel>>.value(<_i2.ProductModel>[]),
      ) as _i4.Future<List<_i2.ProductModel>>);

  @override
  _i4.Future<List<_i2.ProductModel>> getProductsOnSale({
    int? page,
    int? limit,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getProductsOnSale,
          [],
          {
            #page: page,
            #limit: limit,
          },
        ),
        returnValue:
            _i4.Future<List<_i2.ProductModel>>.value(<_i2.ProductModel>[]),
      ) as _i4.Future<List<_i2.ProductModel>>);

  @override
  _i4.Future<List<_i2.ProductModel>> getRelatedProducts({
    required String? productId,
    int? limit,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRelatedProducts,
          [],
          {
            #productId: productId,
            #limit: limit,
          },
        ),
        returnValue:
            _i4.Future<List<_i2.ProductModel>>.value(<_i2.ProductModel>[]),
      ) as _i4.Future<List<_i2.ProductModel>>);

  @override
  _i4.Future<List<_i2.ProductModel>> searchProducts({
    required String? query,
    int? page,
    int? limit,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchProducts,
          [],
          {
            #query: query,
            #page: page,
            #limit: limit,
          },
        ),
        returnValue:
            _i4.Future<List<_i2.ProductModel>>.value(<_i2.ProductModel>[]),
      ) as _i4.Future<List<_i2.ProductModel>>);

  @override
  _i4.Future<List<_i2.ProductModel>> getProductsByCategory(
          String? categoryId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getProductsByCategory,
          [categoryId],
        ),
        returnValue:
            _i4.Future<List<_i2.ProductModel>>.value(<_i2.ProductModel>[]),
      ) as _i4.Future<List<_i2.ProductModel>>);

  @override
  _i4.Future<List<_i2.ProductModel>> getProductsByIds(List<String>? ids) =>
      (super.noSuchMethod(
        Invocation.method(
          #getProductsByIds,
          [ids],
        ),
        returnValue:
            _i4.Future<List<_i2.ProductModel>>.value(<_i2.ProductModel>[]),
      ) as _i4.Future<List<_i2.ProductModel>>);
}

/// A class which mocks [ProductLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductLocalDataSource extends _i1.Mock
    implements _i5.ProductLocalDataSource {
  MockProductLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.ProductModel>> getCachedProducts() => (super.noSuchMethod(
        Invocation.method(
          #getCachedProducts,
          [],
        ),
        returnValue:
            _i4.Future<List<_i2.ProductModel>>.value(<_i2.ProductModel>[]),
      ) as _i4.Future<List<_i2.ProductModel>>);

  @override
  _i4.Future<void> cacheProducts(List<_i2.ProductModel>? products) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheProducts,
          [products],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i2.ProductModel> getCachedProductById(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCachedProductById,
          [id],
        ),
        returnValue: _i4.Future<_i2.ProductModel>.value(_FakeProductModel_0(
          this,
          Invocation.method(
            #getCachedProductById,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.ProductModel>);

  @override
  _i4.Future<void> cacheProduct(_i2.ProductModel? product) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheProduct,
          [product],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<_i2.ProductModel>> getCachedFeaturedProducts() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCachedFeaturedProducts,
          [],
        ),
        returnValue:
            _i4.Future<List<_i2.ProductModel>>.value(<_i2.ProductModel>[]),
      ) as _i4.Future<List<_i2.ProductModel>>);

  @override
  _i4.Future<void> cacheFeaturedProducts(List<_i2.ProductModel>? products) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheFeaturedProducts,
          [products],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<_i2.ProductModel>> getCachedProductsOnSale() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCachedProductsOnSale,
          [],
        ),
        returnValue:
            _i4.Future<List<_i2.ProductModel>>.value(<_i2.ProductModel>[]),
      ) as _i4.Future<List<_i2.ProductModel>>);

  @override
  _i4.Future<void> cacheProductsOnSale(List<_i2.ProductModel>? products) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheProductsOnSale,
          [products],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<_i2.ProductModel>> getCachedRelatedProducts(
          String? productId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCachedRelatedProducts,
          [productId],
        ),
        returnValue:
            _i4.Future<List<_i2.ProductModel>>.value(<_i2.ProductModel>[]),
      ) as _i4.Future<List<_i2.ProductModel>>);

  @override
  _i4.Future<void> cacheRelatedProducts(
    String? productId,
    List<_i2.ProductModel>? products,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheRelatedProducts,
          [
            productId,
            products,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<_i2.ProductModel>> getCachedSearchResults(String? query) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCachedSearchResults,
          [query],
        ),
        returnValue:
            _i4.Future<List<_i2.ProductModel>>.value(<_i2.ProductModel>[]),
      ) as _i4.Future<List<_i2.ProductModel>>);

  @override
  _i4.Future<void> cacheSearchResults(
    String? query,
    List<_i2.ProductModel>? products,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheSearchResults,
          [
            query,
            products,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<_i2.ProductModel>> getLastProductsByCategory(
          String? categoryId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getLastProductsByCategory,
          [categoryId],
        ),
        returnValue:
            _i4.Future<List<_i2.ProductModel>>.value(<_i2.ProductModel>[]),
      ) as _i4.Future<List<_i2.ProductModel>>);

  @override
  _i4.Future<void> cacheProductsByCategory(
    String? categoryId,
    List<_i2.ProductModel>? products,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheProductsByCategory,
          [
            categoryId,
            products,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<_i2.ProductModel>> getLastProductsByIds(List<String>? ids) =>
      (super.noSuchMethod(
        Invocation.method(
          #getLastProductsByIds,
          [ids],
        ),
        returnValue:
            _i4.Future<List<_i2.ProductModel>>.value(<_i2.ProductModel>[]),
      ) as _i4.Future<List<_i2.ProductModel>>);

  @override
  _i4.Future<void> cacheProductsByIds(
    List<String>? ids,
    List<_i2.ProductModel>? products,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheProductsByIds,
          [
            ids,
            products,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> clearCache() => (super.noSuchMethod(
        Invocation.method(
          #clearCache,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i6.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
}
