// Mocks generated by Mockito 5.4.5 from annotations
// in dayliz_app/test/data/repositories/cart_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dayliz_app/core/network/network_info.dart' as _i7;
import 'package:dayliz_app/data/datasources/cart_local_data_source.dart' as _i6;
import 'package:dayliz_app/data/datasources/cart_remote_data_source.dart'
    as _i3;
import 'package:dayliz_app/data/models/cart_item_model.dart' as _i2;
import 'package:dayliz_app/domain/entities/product.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCartItemModel_0 extends _i1.SmartFake implements _i2.CartItemModel {
  _FakeCartItemModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CartRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockCartRemoteDataSource extends _i1.Mock
    implements _i3.CartRemoteDataSource {
  MockCartRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.CartItemModel>> getCartItems() => (super.noSuchMethod(
        Invocation.method(
          #getCartItems,
          [],
        ),
        returnValue:
            _i4.Future<List<_i2.CartItemModel>>.value(<_i2.CartItemModel>[]),
      ) as _i4.Future<List<_i2.CartItemModel>>);

  @override
  _i4.Future<_i2.CartItemModel> addToCart({
    required _i5.Product? product,
    required int? quantity,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addToCart,
          [],
          {
            #product: product,
            #quantity: quantity,
          },
        ),
        returnValue: _i4.Future<_i2.CartItemModel>.value(_FakeCartItemModel_0(
          this,
          Invocation.method(
            #addToCart,
            [],
            {
              #product: product,
              #quantity: quantity,
            },
          ),
        )),
      ) as _i4.Future<_i2.CartItemModel>);

  @override
  _i4.Future<bool> removeFromCart({required String? cartItemId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeFromCart,
          [],
          {#cartItemId: cartItemId},
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<_i2.CartItemModel> updateQuantity({
    required String? cartItemId,
    required int? quantity,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateQuantity,
          [],
          {
            #cartItemId: cartItemId,
            #quantity: quantity,
          },
        ),
        returnValue: _i4.Future<_i2.CartItemModel>.value(_FakeCartItemModel_0(
          this,
          Invocation.method(
            #updateQuantity,
            [],
            {
              #cartItemId: cartItemId,
              #quantity: quantity,
            },
          ),
        )),
      ) as _i4.Future<_i2.CartItemModel>);

  @override
  _i4.Future<bool> clearCart() => (super.noSuchMethod(
        Invocation.method(
          #clearCart,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<double> getTotalPrice() => (super.noSuchMethod(
        Invocation.method(
          #getTotalPrice,
          [],
        ),
        returnValue: _i4.Future<double>.value(0.0),
      ) as _i4.Future<double>);

  @override
  _i4.Future<int> getItemCount() => (super.noSuchMethod(
        Invocation.method(
          #getItemCount,
          [],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<bool> isInCart({required String? productId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #isInCart,
          [],
          {#productId: productId},
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
}

/// A class which mocks [CartLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockCartLocalDataSource extends _i1.Mock
    implements _i6.CartLocalDataSource {
  MockCartLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.CartItemModel>> getCachedCartItems() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCachedCartItems,
          [],
        ),
        returnValue:
            _i4.Future<List<_i2.CartItemModel>>.value(<_i2.CartItemModel>[]),
      ) as _i4.Future<List<_i2.CartItemModel>>);

  @override
  _i4.Future<bool> cacheCartItems(List<_i2.CartItemModel>? cartItems) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheCartItems,
          [cartItems],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<_i2.CartItemModel> addToLocalCart({
    required _i5.Product? product,
    required int? quantity,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addToLocalCart,
          [],
          {
            #product: product,
            #quantity: quantity,
          },
        ),
        returnValue: _i4.Future<_i2.CartItemModel>.value(_FakeCartItemModel_0(
          this,
          Invocation.method(
            #addToLocalCart,
            [],
            {
              #product: product,
              #quantity: quantity,
            },
          ),
        )),
      ) as _i4.Future<_i2.CartItemModel>);

  @override
  _i4.Future<bool> removeFromLocalCart({required String? cartItemId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeFromLocalCart,
          [],
          {#cartItemId: cartItemId},
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<_i2.CartItemModel> updateLocalQuantity({
    required String? cartItemId,
    required int? quantity,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateLocalQuantity,
          [],
          {
            #cartItemId: cartItemId,
            #quantity: quantity,
          },
        ),
        returnValue: _i4.Future<_i2.CartItemModel>.value(_FakeCartItemModel_0(
          this,
          Invocation.method(
            #updateLocalQuantity,
            [],
            {
              #cartItemId: cartItemId,
              #quantity: quantity,
            },
          ),
        )),
      ) as _i4.Future<_i2.CartItemModel>);

  @override
  _i4.Future<bool> clearLocalCart() => (super.noSuchMethod(
        Invocation.method(
          #clearLocalCart,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<double> getLocalTotalPrice() => (super.noSuchMethod(
        Invocation.method(
          #getLocalTotalPrice,
          [],
        ),
        returnValue: _i4.Future<double>.value(0.0),
      ) as _i4.Future<double>);

  @override
  _i4.Future<int> getLocalItemCount() => (super.noSuchMethod(
        Invocation.method(
          #getLocalItemCount,
          [],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<bool> isInLocalCart({required String? productId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #isInLocalCart,
          [],
          {#productId: productId},
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i7.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
}
