// Mocks generated by Mockito 5.4.5 from annotations
// in dayliz_app/test/data/repositories/order_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dayliz_app/core/network/network_info.dart' as _i5;
import 'package:dayliz_app/data/datasources/order_data_source.dart' as _i3;
import 'package:dayliz_app/data/models/order_model.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeOrderModel_0 extends _i1.SmartFake implements _i2.OrderModel {
  _FakeOrderModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [OrderDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockOrderDataSource extends _i1.Mock implements _i3.OrderDataSource {
  MockOrderDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.OrderModel>> getOrders() => (super.noSuchMethod(
        Invocation.method(
          #getOrders,
          [],
        ),
        returnValue: _i4.Future<List<_i2.OrderModel>>.value(<_i2.OrderModel>[]),
      ) as _i4.Future<List<_i2.OrderModel>>);

  @override
  _i4.Future<_i2.OrderModel> getOrderById(String? orderId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getOrderById,
          [orderId],
        ),
        returnValue: _i4.Future<_i2.OrderModel>.value(_FakeOrderModel_0(
          this,
          Invocation.method(
            #getOrderById,
            [orderId],
          ),
        )),
      ) as _i4.Future<_i2.OrderModel>);

  @override
  _i4.Future<_i2.OrderModel> createOrder(_i2.OrderModel? order) =>
      (super.noSuchMethod(
        Invocation.method(
          #createOrder,
          [order],
        ),
        returnValue: _i4.Future<_i2.OrderModel>.value(_FakeOrderModel_0(
          this,
          Invocation.method(
            #createOrder,
            [order],
          ),
        )),
      ) as _i4.Future<_i2.OrderModel>);

  @override
  _i4.Future<bool> cancelOrder(
    String? orderId, {
    String? reason,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #cancelOrder,
          [orderId],
          {#reason: reason},
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<Map<String, dynamic>> trackOrder(String? orderId) =>
      (super.noSuchMethod(
        Invocation.method(
          #trackOrder,
          [orderId],
        ),
        returnValue:
            _i4.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i4.Future<Map<String, dynamic>>);

  @override
  _i4.Future<Map<String, int>> getOrderStatistics() => (super.noSuchMethod(
        Invocation.method(
          #getOrderStatistics,
          [],
        ),
        returnValue: _i4.Future<Map<String, int>>.value(<String, int>{}),
      ) as _i4.Future<Map<String, int>>);

  @override
  _i4.Future<List<_i2.OrderModel>> getOrdersByStatus(String? status) =>
      (super.noSuchMethod(
        Invocation.method(
          #getOrdersByStatus,
          [status],
        ),
        returnValue: _i4.Future<List<_i2.OrderModel>>.value(<_i2.OrderModel>[]),
      ) as _i4.Future<List<_i2.OrderModel>>);

  @override
  _i4.Future<List<_i2.OrderModel>> searchOrders(String? query) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchOrders,
          [query],
        ),
        returnValue: _i4.Future<List<_i2.OrderModel>>.value(<_i2.OrderModel>[]),
      ) as _i4.Future<List<_i2.OrderModel>>);
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i5.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
}
