// Mocks generated by Mockito 5.4.5 from annotations
// in dayliz_app/test/domain/usecases/order/create_order_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:dayliz_app/core/errors/failures.dart' as _i5;
import 'package:dayliz_app/domain/entities/order.dart' as _i6;
import 'package:dayliz_app/domain/repositories/order_repository.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [OrderRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockOrderRepository extends _i1.Mock implements _i3.OrderRepository {
  MockOrderRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Order>>> getOrders() =>
      (super.noSuchMethod(
        Invocation.method(
          #getOrders,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, List<_i6.Order>>>.value(
            _FakeEither_0<_i5.Failure, List<_i6.Order>>(
          this,
          Invocation.method(
            #getOrders,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.Order>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Order>> getOrderById(
          String? orderId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getOrderById,
          [orderId],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Order>>.value(
            _FakeEither_0<_i5.Failure, _i6.Order>(
          this,
          Invocation.method(
            #getOrderById,
            [orderId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.Order>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Order>> createOrder(
          _i6.Order? order) =>
      (super.noSuchMethod(
        Invocation.method(
          #createOrder,
          [order],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Order>>.value(
            _FakeEither_0<_i5.Failure, _i6.Order>(
          this,
          Invocation.method(
            #createOrder,
            [order],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.Order>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, bool>> cancelOrder(
    String? orderId, {
    String? reason,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #cancelOrder,
          [orderId],
          {#reason: reason},
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, bool>>.value(
            _FakeEither_0<_i5.Failure, bool>(
          this,
          Invocation.method(
            #cancelOrder,
            [orderId],
            {#reason: reason},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, bool>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, Map<String, dynamic>>> trackOrder(
          String? orderId) =>
      (super.noSuchMethod(
        Invocation.method(
          #trackOrder,
          [orderId],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, Map<String, dynamic>>>.value(
                _FakeEither_0<_i5.Failure, Map<String, dynamic>>(
          this,
          Invocation.method(
            #trackOrder,
            [orderId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, Map<String, dynamic>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, Map<String, int>>> getOrderStatistics() =>
      (super.noSuchMethod(
        Invocation.method(
          #getOrderStatistics,
          [],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, Map<String, int>>>.value(
                _FakeEither_0<_i5.Failure, Map<String, int>>(
          this,
          Invocation.method(
            #getOrderStatistics,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, Map<String, int>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Order>>> getOrdersByStatus(
          String? status) =>
      (super.noSuchMethod(
        Invocation.method(
          #getOrdersByStatus,
          [status],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, List<_i6.Order>>>.value(
            _FakeEither_0<_i5.Failure, List<_i6.Order>>(
          this,
          Invocation.method(
            #getOrdersByStatus,
            [status],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.Order>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Order>>> searchOrders(
          String? query) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchOrders,
          [query],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, List<_i6.Order>>>.value(
            _FakeEither_0<_i5.Failure, List<_i6.Order>>(
          this,
          Invocation.method(
            #searchOrders,
            [query],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.Order>>>);
}
