// Mocks generated by Mockito 5.4.5 from annotations
// in dayliz_app/test/presentation/providers/cart_providers_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:dayliz_app/core/errors/failures.dart' as _i6;
import 'package:dayliz_app/domain/entities/cart_item.dart' as _i7;
import 'package:dayliz_app/domain/repositories/cart_repository.dart' as _i2;
import 'package:dayliz_app/domain/usecases/add_to_cart_usecase.dart' as _i8;
import 'package:dayliz_app/domain/usecases/clear_cart_usecase.dart' as _i11;
import 'package:dayliz_app/domain/usecases/get_cart_item_count_usecase.dart'
    as _i13;
import 'package:dayliz_app/domain/usecases/get_cart_items_usecase.dart' as _i4;
import 'package:dayliz_app/domain/usecases/get_cart_total_price_usecase.dart'
    as _i12;
import 'package:dayliz_app/domain/usecases/is_in_cart_usecase.dart' as _i14;
import 'package:dayliz_app/domain/usecases/remove_from_cart_usecase.dart'
    as _i9;
import 'package:dayliz_app/domain/usecases/update_cart_quantity_usecase.dart'
    as _i10;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCartRepository_0 extends _i1.SmartFake
    implements _i2.CartRepository {
  _FakeCartRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetCartItemsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetCartItemsUseCase extends _i1.Mock
    implements _i4.GetCartItemsUseCase {
  MockGetCartItemsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CartRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeCartRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.CartRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i7.CartItem>>> call() =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue:
            _i5.Future<_i3.Either<_i6.Failure, List<_i7.CartItem>>>.value(
                _FakeEither_1<_i6.Failure, List<_i7.CartItem>>(
          this,
          Invocation.method(
            #call,
            [],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, List<_i7.CartItem>>>);
}

/// A class which mocks [AddToCartUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddToCartUseCase extends _i1.Mock implements _i8.AddToCartUseCase {
  MockAddToCartUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CartRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeCartRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.CartRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.CartItem>> call(
          _i8.AddToCartParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, _i7.CartItem>>.value(
            _FakeEither_1<_i6.Failure, _i7.CartItem>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i7.CartItem>>);
}

/// A class which mocks [RemoveFromCartUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoveFromCartUseCase extends _i1.Mock
    implements _i9.RemoveFromCartUseCase {
  MockRemoveFromCartUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CartRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeCartRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.CartRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, bool>> call(
          _i9.RemoveFromCartParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, bool>>.value(
            _FakeEither_1<_i6.Failure, bool>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, bool>>);
}

/// A class which mocks [UpdateCartQuantityUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateCartQuantityUseCase extends _i1.Mock
    implements _i10.UpdateCartQuantityUseCase {
  MockUpdateCartQuantityUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CartRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeCartRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.CartRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.CartItem>> call(
          _i10.UpdateCartQuantityParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, _i7.CartItem>>.value(
            _FakeEither_1<_i6.Failure, _i7.CartItem>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i7.CartItem>>);
}

/// A class which mocks [ClearCartUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockClearCartUseCase extends _i1.Mock implements _i11.ClearCartUseCase {
  MockClearCartUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CartRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeCartRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.CartRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, bool>> call() => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, bool>>.value(
            _FakeEither_1<_i6.Failure, bool>(
          this,
          Invocation.method(
            #call,
            [],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, bool>>);
}

/// A class which mocks [GetCartTotalPriceUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetCartTotalPriceUseCase extends _i1.Mock
    implements _i12.GetCartTotalPriceUseCase {
  MockGetCartTotalPriceUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CartRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeCartRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.CartRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, double>> call() => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, double>>.value(
            _FakeEither_1<_i6.Failure, double>(
          this,
          Invocation.method(
            #call,
            [],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, double>>);
}

/// A class which mocks [GetCartItemCountUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetCartItemCountUseCase extends _i1.Mock
    implements _i13.GetCartItemCountUseCase {
  MockGetCartItemCountUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CartRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeCartRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.CartRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, int>> call() => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, int>>.value(
            _FakeEither_1<_i6.Failure, int>(
          this,
          Invocation.method(
            #call,
            [],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, int>>);
}

/// A class which mocks [IsInCartUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockIsInCartUseCase extends _i1.Mock implements _i14.IsInCartUseCase {
  MockIsInCartUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CartRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeCartRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.CartRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, bool>> call(_i14.IsInCartParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, bool>>.value(
            _FakeEither_1<_i6.Failure, bool>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, bool>>);
}
